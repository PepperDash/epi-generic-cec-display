/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron Germany
System Name:
System Number:
Programmer: MH
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
//#SYMBOL_NAME "MODBUS-TCP Read Input Register v1.3"
//#CATEGORY "0" 
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT	
	_skip_, 
	Debug, 
	_skip_, 
	Poll_all;

ANALOG_INPUT
	_skip_,
	unit_id,
	start_address,
	count_reg;
		
BUFFER_INPUT
	_SKIP_,
	From_Processor[1200]; 

DIGITAL_OUTPUT 
	_skip_, 
	_skip_, 
	_skip_, 
	_skip_;

ANALOG_OUTPUT
	_skip_,
	_skip_,
	_skip_,
	_skip_;

STRING_OUTPUT
	_skip_, 
	To_Processor;
	
ANALOG_OUTPUT
	_skip_,
	value_fb[100];

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
//INTEGER_PARAMETER	unit_id, start_address, count_reg;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
STRING	
	start_com[5], 
	end_com[5], 
	tempString[300], 
	temp[5];
	
INTEGER	
	RxOk, 
	array_index, 
	start_marker, 
	end_marker;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function ProcessString()
{
	Integer i, high_b, low_b, temp, s;

	if(Byte(tempString, 8)=4)
	{
		s=10;
		for(i=1 TO count_reg STEP 1)
			{
			high_b = Byte(tempString, s);
			low_b = Byte(tempString, s+1);
	        
			temp = (high_b&0xFF)<<8;
			value_fb[i] = (temp|low_b);
			If(Debug) Trace("ProcessString high_b: %d, low_b: %d, temp: %d, value_fb[%d]: %d\r", high_b, low_b, temp, i, value_fb[i]);
			s=s+2;
		}
	}
	else if(Byte(tempString, 8)=132)
	{
    	Trace("Exception in module %d: invalid start address or number of addresses", array_index);
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Poll_all
{
	Integer h_start, l_start, h_count, l_count;

	l_start = (start_address&0x00FF);
	h_start = (start_address&0xFF00)>>8;
	If(Debug) Trace("Poll_All l_start: %d, h_start: %d\r", l_start, h_start);

	l_count = (count_reg&0x00FF);
	h_count = (count_reg&0xFF00)>>8;
	If(Debug) Trace("Poll_All l_count: %d, h_count: %d\r", l_count, h_count);
                                    
    To_Processor = start_com + chr(array_index) + "\x00\x00\x00\x00\x00\x06" + chr(unit_id) + "\x04" + chr(h_start) + chr(l_start) + chr(h_count) + chr(l_count) + end_com;
}

#if_series3
THREADSAFE CHANGE From_Processor
{
	while(Len(From_Processor)>0)
	{
		start_marker = Find(start_com, From_Processor);

		if(start_marker=1)
		{
			temp = RemovebyLength(start_marker+3, From_Processor);
			end_marker = Byte(From_Processor, 6) + 6;        
		
			if(Mid(From_Processor, end_marker+1, 4) = end_com)
			{ 
				tempString = RemovebyLength(end_marker, From_Processor);
				temp = RemovebyLength(4, From_Processor);
				ProcessString();
			}
			else ClearBuffer(From_Processor);
		}
		else if(Find("array_index=", From_Processor))
		{
	   		array_index = Byte(From_Processor, Find("array_index=", From_Processor)+12);
			ClearBuffer(From_Processor);
		}
		else ClearBuffer(From_Processor);
	}
}
#else
CHANGE From_Processor
{
	if(RxOk = 1)
	{
		RxOk = 0;
       
		while(Len(From_Processor)>0)
		{
			start_marker = Find(start_com, From_Processor);
	
			if(start_marker=1)
			{
				temp = RemovebyLength(start_marker+3, From_Processor);
				end_marker = Byte(From_Processor, 6) + 6;        
		
				if(Mid(From_Processor, end_marker+1, 4) = end_com)
				{ 
					tempString = RemovebyLength(end_marker, From_Processor);
					temp = RemovebyLength(4, From_Processor);
					ProcessString();
				}
				else ClearBuffer(From_Processor);
			}
			else if(Find("array_index=", From_Processor))
			{
	    		array_index = Byte(From_Processor, Find("array_index=", From_Processor)+12);
				ClearBuffer(From_Processor);
			}
			else ClearBuffer(From_Processor);
		}
		RxOk = 1;
	}
}
#endif

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	RxOk = 1;
	start_com = "\x00\xFF\x00\xFF";
	end_com = "\x00\xFE\x00\xFE";
}

